!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Atom	atom/atom.ts	/^export abstract class Atom<Model extends urn_mdls.resources.Resource> implements urn_mdls.resources.Resource {$/;"	c
AtomCreateFunction	atom/types.ts	/^export type AtomCreateFunction<M extends urn_mdls.resources.Resource, A extends Atom<M>> =$/;"	t
AtomModule	atom/types.ts	/^export type AtomModule<M extends urn_mdls.resources.Resource, A extends Atom<M>> = {$/;"	t
ComparsionQueryFilter	types.ts	/^export type ComparsionQueryFilter = {$/;"	t
ConditionalQueryFilter	types.ts	/^type ConditionalQueryFilter = {$/;"	t
ConnectionInstance	db/connection.ts	/^export type ConnectionInstance = InstanceType<typeof DBConnection>;$/;"	t
DAL	dal/dal.ts	/^export abstract class DAL<M extends urn_mdls.resources.Resource, A extends urn_atom.Atom<M>> {$/;"	c
DALUsers	dal/users.ts	/^class DALUsers extends DAL<urn_atom.user.models.User, urn_atom.user.UserInstance> {$/;"	c
DBConnection	db/connection.ts	/^class DBConnection {$/;"	c
DalUsersInstance	dal/users.ts	/^export type DalUsersInstance = InstanceType<typeof DALUsers>;$/;"	t
FilterAndOrNorType	types.ts	/^type FilterAndOrNorType = {$/;"	t
FilterComparsionType	types.ts	/^type FilterComparsionType = {$/;"	t
FilterType	types.ts	/^export type FilterType<T> = QueryFilter<T> | ConditionalQueryFilter;$/;"	t
QueryFilter	types.ts	/^export type QueryFilter<T> = {$/;"	t
QueryOptions	types.ts	/^export interface QueryOptions<T> {$/;"	i
Relation	db/relation.ts	/^export class Relation<M extends urn_mdls.resources.Resource> {$/;"	c
Schema	db/types.ts	/^export class Schema extends mongoose.Schema{}$/;"	c
SchemaDefinition	db/types.ts	/^export interface SchemaDefinition extends mongoose.SchemaDefinition{}$/;"	i
User	atom/user/class.ts	/^export class User extends Atom<urn_mdls.resources.User> implements urn_mdls.resources.User {$/;"	c
User	atom/user/index.ts	/^	export type User = urn_mdls.resources.User;$/;"	t
UserInstance	atom/user/index.ts	/^export type UserInstance = InstanceType<typeof User>;$/;"	t
_connection	db/connection.ts	/^	private _connection:mongoose.Connection;$/;"	m
_db_relation	dal/dal.ts	/^	protected _db_relation:urn_db.Relation<M>;$/;"	m
_get_keys	atom/atom.ts	/^	protected abstract _get_keys():urn_mdls.ModelKeysCategories<Model>;$/;"	m
_get_keys	atom/user/class.ts	/^	protected _get_keys()$/;"	m
_get_relation	dal/dal.ts	/^	private _get_relation():urn_db.Relation<M>{$/;"	m
_id	atom/atom.ts	/^	public _id?:string;$/;"	m
_is_valid_id	dal/dal.ts	/^function _is_valid_id(id:string)$/;"	f
_on_close	db/connection.ts	/^	private _on_close()$/;"	m
_on_connected	db/connection.ts	/^	private _on_connected()$/;"	m
_on_connecting	db/connection.ts	/^	private _on_connecting()$/;"	m
_on_disconnected	db/connection.ts	/^	private _on_disconnected()$/;"	m
_on_disconnecting	db/connection.ts	/^	private _on_disconnecting()$/;"	m
_on_error	db/connection.ts	/^	private _on_error(e:Error)$/;"	m
_on_reconnect_failed	db/connection.ts	/^	private _on_reconnect_failed()$/;"	m
_on_reconnect_tries	db/connection.ts	/^	private _on_reconnect_tries()$/;"	m
_on_reconnected	db/connection.ts	/^	private _on_reconnected()$/;"	m
_validate_field	dal/dal.ts	/^function _validate_field(field:any)$/;"	f
_validate_filter	dal/dal.ts	/^function _validate_filter<M extends urn_mdls.resources.Resource, A extends urn_atom.Atom<M>>$/;"	f
_validate_filter_options_params	dal/dal.ts	/^function _validate_filter_options_params<M extends urn_mdls.resources.Resource, A extends urn_atom.Atom<M>>($/;"	f
_validate_options	dal/dal.ts	/^function _validate_options<M extends urn_mdls.resources.Resource, A extends urn_atom.Atom<M>>$/;"	f
active	atom/user/class.ts	/^	public active:boolean;$/;"	m
bio	atom/user/class.ts	/^	public bio:string;$/;"	m
close	db/connection.ts	/^	public async close()$/;"	m
create	dal/users.ts	/^export default function create():DalUsersInstance{$/;"	f
create	db/connection.ts	/^export function create(con_name:string, db_host:string, db_port:number, db_name:string)$/;"	f
create_atom	atom/atom.ts	/^export function create_atom<M extends urn_mdls.resources.Resource, A extends Atom<M>>($/;"	f
create_user_dal	index.ts	/^import create_user_dal from '.\/dal\/users';$/;"	I
creation_date	atom/user/class.ts	/^	public creation_date:Date;$/;"	m
email	atom/user/class.ts	/^	public email:string;$/;"	m
find	dal/dal.ts	/^	public async find(filter:QueryFilter<M>, options?:QueryOptions<M>)$/;"	m
find	db/relation.ts	/^	public async find(filter:QueryFilter<M>, options?:QueryOptions<M>)$/;"	m
find_by_id	dal/dal.ts	/^	public async find_by_id(id:string)$/;"	m
find_by_id	db/relation.ts	/^	public async find_by_id(id:string)$/;"	m
find_one	dal/dal.ts	/^	public async find_one(filter:QueryFilter<M>, options?:QueryOptions<M>)$/;"	m
find_one	db/relation.ts	/^	public async find_one(filter:QueryFilter<M>, options:QueryOptions<M>)$/;"	m
first_name	atom/user/class.ts	/^	public first_name:string;$/;"	m
get_relation	db/connection.ts	/^	public get_relation<M extends urn_mdls.resources.Resource>(relation_name:string, schema:Schema)$/;"	m
insert_one	dal/dal.ts	/^	public async insert_one(atom:A)$/;"	m
insert_one	db/relation.ts	/^	public async insert_one(resource:M)$/;"	m
is_valid_id	db/connection.ts	/^	public is_valid_id(id:string)$/;"	m
last_name	atom/user/class.ts	/^	public last_name:string;$/;"	m
module	atom/user/index.ts	/^export const module:AtomModule<models.User, User> = {$/;"	v
mongoose	db/connection.ts	/^import mongoose from 'mongoose';$/;"	I
mongoose	db/relation.ts	/^import mongoose from 'mongoose';$/;"	I
mongoose	db/types.ts	/^import mongoose from 'mongoose';$/;"	I
name	db/connection.ts	/^	public name:string;$/;"	m
password	atom/user/class.ts	/^	public password:string;$/;"	m
readyState	db/connection.ts	/^	public readyState:number;$/;"	m
return	atom/atom.ts	/^	public return()$/;"	m
string_id	db/relation.ts	/^function string_id<M extends urn_mdls.resources.Resource>(resource:M)$/;"	f
type	atom/user/class.ts	/^	public type:string;$/;"	m
uri	db/connection.ts	/^	public uri:string;$/;"	m
urn_mdls	atom/atom.ts	/^import urn_mdls from 'urn-mdls';$/;"	I
urn_mdls	atom/types.ts	/^import urn_mdls from 'urn-mdls';$/;"	I
urn_mdls	atom/user/class.ts	/^import urn_mdls from 'urn-mdls';$/;"	I
urn_mdls	atom/user/index.ts	/^import urn_mdls from 'urn-mdls';$/;"	I
urn_mdls	dal/dal.ts	/^import urn_mdls from 'urn-mdls';$/;"	I
urn_mdls	db/connection.ts	/^import urn_mdls from 'urn-mdls';$/;"	I
urn_mdls	db/relation.ts	/^import urn_mdls from 'urn-mdls';$/;"	I
user_keys	atom/user/class.ts	/^export const user_keys:urn_mdls.ModelKeysCategories<urn_mdls.resources.User> =$/;"	v
user_schema_definition	atom/user/schema.ts	/^export const user_schema_definition:urn_db.SchemaDefinition = {$/;"	v
username	atom/user/class.ts	/^	public username:string;$/;"	m
validate	atom/atom.ts	/^	public validate(resource:Model)$/;"	m
